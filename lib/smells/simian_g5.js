// Generated by CoffeeScript 1.6.3
(function() {
  var DuplicationDecorator, ReportDecorator, YAML, exec, path, sh,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exec = require('child_process').exec;

  ReportDecorator = require('../report_decorator').ReportDecorator;

  YAML = require('yamljs');

  sh = require('execSync');

  path = require('path');

  DuplicationDecorator = (function(_super) {
    __extends(DuplicationDecorator, _super);

    function DuplicationDecorator() {
      var getReport, parse;
      DuplicationDecorator.__super__.constructor.apply(this, arguments);
      getReport = function(dupe) {
        var filename;
        filename = dupe.sourceFile.replace(__dirname, '');
        return "" + dupe.lineCount + " duplicate lines in " + filename + " from " + dupe.startLineNumber + " to " + dupe.endLineNumber;
      };
      parse = function(content, smellCallback) {
        var block, dupe, dupes, file, set, _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = content.simian.checks[0].sets;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          set = _ref[_i];
          dupes = {};
          _ref1 = set.blocks;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            block = _ref1[_j];
            dupes[block.sourceFile] = {
              duplicates: []
            };
          }
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (file in dupes) {
              if (!__hasProp.call(dupes, file)) continue;
              dupe = dupes[file];
              _results1.push((function() {
                var _k, _len2, _ref2, _results2;
                _ref2 = set.blocks;
                _results2 = [];
                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                  block = _ref2[_k];
                  _results2.push(smellCallback(file, {
                    lineCount: set.lineCount,
                    sourceFile: block.sourceFile,
                    startLineNumber: block.startLineNumber,
                    endLineNumber: block.endLineNumber
                  }));
                }
                return _results2;
              })());
            }
            return _results1;
          })());
        }
        return _results;
      };
      this.process = function(sourceTree) {
        var cmd, data, header, result, root, testPath, yaml, _ref;
        testPath = sourceTree.getPath();
        cmd = "java -jar java_modules/simian-2.3.35/bin/simian-2.3.35.jar -formatter=yaml -threshold=3 -language=javascript \"" + testPath + "/**/*.js\"";
        result = sh.exec(cmd);
        root = path.resolve(__dirname, '../../') + '/';
        _ref = result.stdout.split('---'), header = _ref[0], yaml = _ref[1];
        data = YAML.parse(yaml);
        parse(data, function(filename, duplicates) {
          var report;
          filename = filename.replace(root, '');
          report = getReport(duplicates);
          return sourceTree.addReport(filename, report);
        });
        return this.component.process(sourceTree);
      };
    }

    return DuplicationDecorator;

  })(ReportDecorator);

  exports.DuplicationDecorator = DuplicationDecorator;

}).call(this);
