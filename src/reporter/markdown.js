// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var format, formatFunction, formatFunctions, formatModule, formatProject, formatDuplicates, formatDuplicate;

  var MOD_LOC_THRESHOLD = 500;
  var MOD_MAINT_THRESHOLD = 65;
  var MOD_DUPE_THRESHOLD = 0;
  var FUNC_LOC_THRESHOLD = 20;
  var FUNC_PARAMS_THRESHOLD = 3;
  var PASS_TEXT = 'PASS';
  var FAIL_TEXT = 'FAIL';

  format = function(result) {
    return result.reports.reduce((function(formatted, report) {
      return formatted + formatModule(report) + "\n\n";
    }), formatProject(result));
  };

  formatProject = function(result) {
    return ["# Complexity report, ", (new Date()).toLocaleDateString(), "\n\n"].join("");
  };

  formatModule = function(report) {
    var loc, maint;
    loc = '';
    if (report.aggregate.sloc.logical > MOD_LOC_THRESHOLD) {
      loc = "* Module size: " + FAIL_TEXT + " (" + report.aggregate.sloc.logical + ")\n";
    }
    maint = '';
    if (Math.round(report.maintainability) < MOD_MAINT_THRESHOLD) {
      maint = "* Maintainability: " + FAIL_TEXT + " (" + (Math.round(report.maintainability)) + ")\n";
    }
    return ["## ", report.path, "\n\n", loc, maint, formatDuplicates(report.duplicates), formatFunctions(report.functions)].join("");
  };
  
  formatDuplicates = function(report) {
    var out;
    
    out = '';
    if (report.length > MOD_DUPE_THRESHOLD) {
      out = report.reduce(function (formatted, report) {
        return formatted + "* Duplicate code:\n" + formatDuplicate(report) + "\n";  
      }, "");
    }
    
    return out;
  };

  formatDuplicate = function(dupe) {
    // TOOD: insert code snippet
    var out = dupe.reduce(function (prev, cur) {
      return prev + ([
        "  * At ", cur.file, " lines ", cur.loc.start.line , ":",
        cur.loc.start.column, " to ", cur.loc.end.line, ":", 
        cur.loc.end.column, "\n"
      ].join(""));
    }, '');
    return out;
  };


  formatFunctions = function(report) {
    return report.reduce((function(formatted, r) {
      var funcs;
      funcs = formatFunction(r);
      if (funcs) {
        return formatted + "\n" + funcs;
      } else {
        return formatted;
      }
    }), "");
  };

  formatFunction = function(report) {
    var loc, params;
    loc = '';
    if (report.sloc.logical > FUNC_LOC_THRESHOLD) {
      loc = "    * Function size: " + FAIL_TEXT + " (" + report.sloc.logical + ")\n";
    }
    params = '';
    if (report.params > FUNC_PARAMS_THRESHOLD) {
      params = "    * Parameter count: " + FAIL_TEXT + " (" + report.params + ")\n";
    }
    if (loc || params) {
      return ["* Function: **", report.name.replace("<", "&lt;"), "**\n", "    * Line No.: ", report.line, "\n", loc, params].join("");
    } else {
      return '';
    }
  };

  exports.format = format;

}).call(this);
